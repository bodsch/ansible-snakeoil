---

- name: check, the certificate domain is specified
  delegate_to: localhost
  ansible.builtin.assert:
    that:
      - snakeoil_domain is defined and snakeoil_domain | length != 0

- name: check, if dhparam is less than or equal to 1024
  delegate_to: localhost
  ansible.builtin.assert:
    that:
      - snakeoil_dhparam is defined
      - not snakeoil_dhparam | int == 1024 or not snakeoil_dhparam | int < 1024
    quiet: true
    fail_msg: "please update your dhparam size greater than 1024"

- name: define current_date
  delegate_to: localhost
  run_once: true
  ansible.builtin.set_fact:
    current_date: "{{ ansible_date_time.iso8601[0:10] }}"

- name: check for snakeoil certificate on ansible controller
  delegate_to: localhost
  become: false
  run_once: true
  block:
    - name: check for created snakeoil directory {{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}
      ansible.builtin.stat:
        path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}"
      register: _snakeoil_local_tmp_directory_created

    - name: check for created pem {{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}/{{ snakeoil_domain }}.pem
      ansible.builtin.stat:
        path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}/{{ snakeoil_domain }}.pem"
      register: _certificate_archive_local
      when:
        - _snakeoil_local_tmp_directory_created is defined
        - _snakeoil_local_tmp_directory_created.stat is defined
        - _snakeoil_local_tmp_directory_created.stat.exists

- name: remove old temporary path '{{ snakeoil_local_tmp_directory }}'
  delegate_to: localhost
  become: false
  ansible.builtin.file:
    path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}"
    state: absent
  when:
    - snakeoil_force

- name: verify expire date
  run_once: true
  delegate_to: localhost
  become: false
  when:
    - _certificate_archive_local.stat is defined
    - _certificate_archive_local.stat.exists
  block:
    - name: get expire date from certificate
      delegate_to: localhost
      become: false
      snakeoil_date:
        snakeoil_directory: "{{ snakeoil_local_tmp_directory }}"
        snakeoil_domain: "{{ snakeoil_domain }}"
        pattern: "%Y-%m-%d"
      environment:
        LANG: ""
      register: _certificate_expire_after

    - name: get size of existing dh.pem
      delegate_to: localhost
      become: false
      snakeoil_openssl:
        state: dhparam_size
        directory: "{{ snakeoil_local_tmp_directory }}"
        domain: "{{ snakeoil_domain }}"
        dhparam: "{{ snakeoil_dhparam | int }}"
      register: _certificate_dhparam_size

    - name: set facts
      ansible.builtin.set_fact:
        snakeoil_expire_date: "{{ _certificate_expire_after.expire_date }}"
        snakeoil_expire_diff_days: "{{ _certificate_expire_after.diff_days }}"
        snakeoil_dhparam_size: "{{ _certificate_dhparam_size.size | int | default('0') }}"

    - name: "certificat expires ..."
      ansible.builtin.debug:
        msg: "certificate expires: {{ snakeoil_expire_date }} (in {{ snakeoil_expire_diff_days }} days)"
      when:
        - snakeoil_expire_diff_days | int != 0

- name: remove '{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}' when expires days lower as 10 days or dhparam size not {{ snakeoil_dhparam }}
  delegate_to: localhost
  become: false
  run_once: true
  ansible.builtin.file:
    path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}"
    state: absent
  when:
    - _snakeoil_local_tmp_directory_created is defined
    - _snakeoil_local_tmp_directory_created.stat is defined
    - _snakeoil_local_tmp_directory_created.stat.exists
    - snakeoil_expire_diff_days | int <= 10 or snakeoil_dhparam_size | int < snakeoil_dhparam | int

- name: create certificate
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - (snakeoil_expire_diff_days | int <= 10 or
       snakeoil_dhparam_size | int < snakeoil_dhparam | int) or
      (_certificate_archive_local.stat is defined and not _certificate_archive_local.stat.exists)
  block:
    - name: create temporary path
      ansible.builtin.file:
        path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}"
        state: directory
        mode: 0750

    - name: create openssl config
      ansible.builtin.template:
        src: csr.j2
        dest: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}/{{ snakeoil_domain }}.conf"
        mode: 0660

    - name: create {{ snakeoil_domain }}.csr
      snakeoil_openssl:
        state: csr
        directory: "{{ snakeoil_local_tmp_directory }}"
        domain: "{{ snakeoil_domain }}"
        openssl_config: "{{ snakeoil_domain }}.conf"

    - name: create {{ snakeoil_domain }}.crt
      snakeoil_openssl:
        state: crt
        directory: "{{ snakeoil_local_tmp_directory }}"
        domain: "{{ snakeoil_domain }}"
        openssl_config: "{{ snakeoil_domain }}.conf"
        cert_life_time: "{{ snakeoil_life_time | int }}"

    - name: create dh.pem
      snakeoil_openssl:
        state: dhparam
        directory: "{{ snakeoil_local_tmp_directory }}"
        domain: "{{ snakeoil_domain }}"
        dhparam: "{{ snakeoil_dhparam | int }}"

    - name:
      block:
        - name: check for {{ snakeoil_domain }} on ansible controller
          delegate_to: localhost
          become: false
          run_once: true
          ansible.builtin.stat:
            path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}"
          register: _certificate_directory_local

        - name: create archive
          delegate_to: localhost
          become: false
          run_once: true
          when:
            - _certificate_directory_local is defined
            - _certificate_directory_local.stat is defined
            - _certificate_directory_local.stat.exists | default('true')
          block:
            - name: compress directory for {{ snakeoil_domain }}
              community.general.archive:
                path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}"
                dest: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}_{{ current_date }}.tgz"
                mode: 0600

- name: check for archive {{ snakeoil_domain }}_{{ current_date }}.tgz on ansible controller
  delegate_to: localhost
  become: false
  run_once: true
  ansible.builtin.stat:
    path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}_{{ current_date }}.tgz"
  register: _certificate_archive_local

- name: define checksum for {{ snakeoil_domain }} on ansible controller
  delegate_to: localhost
  become: false
  run_once: true
  ansible.builtin.stat:
    path: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}_{{ current_date }}.tgz"
    get_md5: false
    get_mime: false
    get_attributes: false
  register: _certificate_archive_checksum_local
  when:
    - _certificate_archive_local is defined
    - _certificate_archive_local.stat is defined
    - _certificate_archive_local.stat.exists | default('true')

- name: check for archive {{ snakeoil_domain }}_{{ current_date }}.tgz on destination
  ansible.builtin.stat:
    path: "{{ snakeoil_remote_tmp_directory }}/{{ snakeoil_domain }}_{{ current_date }}.tgz"
  register: _certificate_archive_remote

- name: define checksum for {{ snakeoil_domain }} on destination
  ansible.builtin.stat:
    path: "{{ snakeoil_remote_tmp_directory }}/{{ snakeoil_domain }}_{{ current_date }}.tgz"
    get_md5: false
    get_mime: false
    get_attributes: false
  register: _certificate_archive_checksum_remote
  when:
    - _certificate_archive_remote is defined
    - _certificate_archive_remote.stat is defined
    - _certificate_archive_remote.stat.exists | default('true')

- name: set facts
  ansible.builtin.set_fact:
    snakeoil_certificate_archive_checksum_local: "{{ _certificate_archive_checksum_local.stat.checksum | default('+') }}"
    snakeoil_certificate_archive_checksum_remote: "{{ _certificate_archive_checksum_remote.stat.checksum | default('-') }}"

- name: transfer certificate to destination instance
  tags:
    - snakeoil
  when:
    - snakeoil_extract_to is defined and snakeoil_extract_to | length != 0
    - _certificate_archive_local.stat.exists | default('true') and
      not _certificate_archive_remote.stat.exists | default('false') or
      snakeoil_certificate_archive_checksum_local != snakeoil_certificate_archive_checksum_remote
  block:
    - name: propagate {{ snakeoil_domain }}_{{ current_date }}.tgz
      become: true
      ansible.builtin.copy:
        src: "{{ snakeoil_local_tmp_directory }}/{{ snakeoil_domain }}_{{ current_date }}.tgz"
        dest: "{{ snakeoil_remote_tmp_directory }}/"
        mode: 0600

    - name: create {{ snakeoil_extract_to }}
      ansible.builtin.file:
        path: "{{ snakeoil_extract_to }}"
        state: directory
        mode: 0750

    - name: extract {{ snakeoil_domain }}_{{ current_date }}.tgz
      ansible.builtin.unarchive:
        src: "{{ snakeoil_remote_tmp_directory }}/{{ snakeoil_domain }}_{{ current_date }}.tgz"
        dest: "{{ snakeoil_extract_to }}"
        remote_src: true
